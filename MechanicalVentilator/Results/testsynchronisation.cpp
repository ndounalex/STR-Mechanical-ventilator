#include "comp.cpp"
#include "helper.h"
#include <chrono>
#include <ctime>
#include "inttypes.h"
std::time_t  current_time = 0;
enum GuardState
{
  GUARD_NOTSTARTED,
  GUARD_STARTED
};
enum ChoiceState
{
  NONE,
  LEFT,
  RIGHT
};
enum SequenceState
{
  SEQ_FST,
  SEQ_SND
};
enum KleeneState
{
  KLEENE_NOTSTARTED,
  KLEENE_STARTED
};
enum InterruptState
{
  INT_FIRST,
  INT_SECOND
};
enum AutState
{
  S3,
  S4,
  S5,
  S6,
  part1,
  TimeEnd,
  Error,
  ExpiratoryPauseTimeoutEnd,
  End2,
  EndTimeout,
  End3,
  End5,
  S0,
  Final,
  S1,
  S2
};
struct TState_choice2BreathCycleConstraint_guard
{
  AutState  autState;

};
struct TState_Error
{
  AutState  autState;

};
struct TState_choice_1choiceBreathCycleConstraint_guard
{
  AutState  autState;
  TState_Error  ts_Error;

};
struct TState_choiceBreathCycleConstraint_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceBreathCycleConstraint_guard  ts_choice_1choiceBreathCycleConstraint_guard;
  TState_choice2BreathCycleConstraint_guard  ts_choice2BreathCycleConstraint_guard;

};
struct TState_guardBreathCycleConstraint
{
  GuardState  guardState;
  TState_choiceBreathCycleConstraint_guard  ts_choiceBreathCycleConstraint_guard;

};
struct TState_StartWait
{
  AutState  autState;

};
struct TState_guard1BreathCycleConstraint
{
  GuardState  guardState;
  TState_StartWait  ts_StartWait;

};
struct TState_BreathCycleConstraint
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1BreathCycleConstraint  ts_guard1BreathCycleConstraint;
  TState_guardBreathCycleConstraint  ts_guardBreathCycleConstraint;

};
struct TState_choice2ExpiratoryPauseTimeout_guard
{
  AutState  autState;

};
struct TState_End5
{
  AutState  autState;

};
struct TState_choice_1choiceExpiratoryPauseTimeout_guard
{
  AutState  autState;
  TState_End5  ts_End5;

};
struct TState_choiceExpiratoryPauseTimeout_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceExpiratoryPauseTimeout_guard  ts_choice_1choiceExpiratoryPauseTimeout_guard;
  TState_choice2ExpiratoryPauseTimeout_guard  ts_choice2ExpiratoryPauseTimeout_guard;

};
struct TState_guardExpiratoryPauseTimeout
{
  GuardState  guardState;
  TState_choiceExpiratoryPauseTimeout_guard  ts_choiceExpiratoryPauseTimeout_guard;

};
struct TState_CheckExpiratoryPause
{
  AutState  autState;

};
struct TState_guard1ExpiratoryPauseTimeout
{
  GuardState  guardState;
  TState_CheckExpiratoryPause  ts_CheckExpiratoryPause;

};
struct TState_ExpiratoryPauseTimeout
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1ExpiratoryPauseTimeout  ts_guard1ExpiratoryPauseTimeout;
  TState_guardExpiratoryPauseTimeout  ts_guardExpiratoryPauseTimeout;

};
struct TState_choice2NoExpiratoryPauseTimeout_guard
{
  AutState  autState;

};
struct TState_ExpiratoryPauseTimeoutEnd
{
  AutState  autState;

};
struct TState_choice_1choiceNoExpiratoryPauseTimeout_guard
{
  AutState  autState;
  TState_ExpiratoryPauseTimeoutEnd  ts_ExpiratoryPauseTimeoutEnd;

};
struct TState_choiceNoExpiratoryPauseTimeout_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceNoExpiratoryPauseTimeout_guard  ts_choice_1choiceNoExpiratoryPauseTimeout_guard;
  TState_choice2NoExpiratoryPauseTimeout_guard  ts_choice2NoExpiratoryPauseTimeout_guard;

};
struct TState_guardNoExpiratoryPauseTimeout
{
  GuardState  guardState;
  TState_choiceNoExpiratoryPauseTimeout_guard  ts_choiceNoExpiratoryPauseTimeout_guard;

};
struct TState_ExpiratoryStart
{
  AutState  autState;

};
struct TState_guard1NoExpiratoryPauseTimeout
{
  GuardState  guardState;
  TState_ExpiratoryStart  ts_ExpiratoryStart;

};
struct TState_NoExpiratoryPauseTimeout
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1NoExpiratoryPauseTimeout  ts_guard1NoExpiratoryPauseTimeout;
  TState_guardNoExpiratoryPauseTimeout  ts_guardNoExpiratoryPauseTimeout;

};
struct TState_TimeConstraints2_o2
{
  Timer right_clock_ExpiratoryPauseTimeout = current_time;
  Timer left_clock_NoExpiratoryPauseTimeout = current_time;
  TState_NoExpiratoryPauseTimeout  ts_NoExpiratoryPauseTimeout;
  TState_ExpiratoryPauseTimeout  ts_ExpiratoryPauseTimeout;

};
struct TState_choice2BreathCycleTimeInterrupt_guard
{
  AutState  autState;

};
struct TState_TimeEnd
{
  AutState  autState;

};
struct TState_choice_1choiceBreathCycleTimeInterrupt_guard
{
  AutState  autState;
  TState_TimeEnd  ts_TimeEnd;

};
struct TState_choiceBreathCycleTimeInterrupt_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceBreathCycleTimeInterrupt_guard  ts_choice_1choiceBreathCycleTimeInterrupt_guard;
  TState_choice2BreathCycleTimeInterrupt_guard  ts_choice2BreathCycleTimeInterrupt_guard;

};
struct TState_guardBreathCycleTimeInterrupt
{
  GuardState  guardState;
  TState_choiceBreathCycleTimeInterrupt_guard  ts_choiceBreathCycleTimeInterrupt_guard;

};
struct TState_LastActions
{
  AutState  autState;

};
struct TState_pguardBreathCycleTimeInterrupt
{
  TState_LastActions  ts_LastActions;

};
struct TState_BreathCycleTimeInterrupt
{
  Timer clock_timed_interrupt = current_time;
  InterruptState  interruptState;
  TState_pguardBreathCycleTimeInterrupt  ts_pguardBreathCycleTimeInterrupt;
  TState_guardBreathCycleTimeInterrupt  ts_guardBreathCycleTimeInterrupt;

};
struct TState_TimeConstraints2_o1
{
  Timer left_clock_BreathCycleTimeInterrupt = current_time;
  Timer right_clock_TimeConstraints2_o2 = current_time;
  TState_BreathCycleTimeInterrupt  ts_BreathCycleTimeInterrupt;
  TState_TimeConstraints2_o2  ts_TimeConstraints2_o2;

};
struct TState_choice2CheckSpontaneousBreakTimeout_guard
{
  AutState  autState;

};
struct TState_EndTimeout
{
  AutState  autState;

};
struct TState_choice_1choiceCheckSpontaneousBreakTimeout_guard
{
  AutState  autState;
  TState_EndTimeout  ts_EndTimeout;

};
struct TState_choiceCheckSpontaneousBreakTimeout_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceCheckSpontaneousBreakTimeout_guard  ts_choice_1choiceCheckSpontaneousBreakTimeout_guard;
  TState_choice2CheckSpontaneousBreakTimeout_guard  ts_choice2CheckSpontaneousBreakTimeout_guard;

};
struct TState_guardCheckSpontaneousBreakTimeout
{
  GuardState  guardState;
  TState_choiceCheckSpontaneousBreakTimeout_guard  ts_choiceCheckSpontaneousBreakTimeout_guard;

};
struct TState_CheckSpontaneousBreath
{
  AutState  autState;

};
struct TState_guard1CheckSpontaneousBreakTimeout
{
  GuardState  guardState;
  TState_CheckSpontaneousBreath  ts_CheckSpontaneousBreath;

};
struct TState_CheckSpontaneousBreakTimeout
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1CheckSpontaneousBreakTimeout  ts_guard1CheckSpontaneousBreakTimeout;
  TState_guardCheckSpontaneousBreakTimeout  ts_guardCheckSpontaneousBreakTimeout;

};
struct TState_TimeConstraints2
{
  Timer left_clock_CheckSpontaneousBreakTimeout = current_time;
  Timer right_clock_TimeConstraints2_o1 = current_time;
  TState_CheckSpontaneousBreakTimeout  ts_CheckSpontaneousBreakTimeout;
  TState_TimeConstraints2_o1  ts_TimeConstraints2_o1;

};
struct TState_Scheduling2
{
  AutState  autState;

};
struct TState_ExpiratoryComponent
{
  float  t5;
  float  t6;
  float  t4;
  Timer right_clock_TimeConstraints2 = current_time;
  Timer left_clock_Scheduling2 = current_time;
  TState_Scheduling2  ts_Scheduling2;
  TState_TimeConstraints2  ts_TimeConstraints2;

};
struct TState_RecruitmentManeuverOnAut
{
  AutState  autState;

};
struct TState_RecruitmentManeuverOnDelay
{
  GuardState  guardState;
  TState_RecruitmentManeuverOnAut  ts_RecruitmentManeuverOnAut;

};
struct TState_InspiratoryPauseDelayAut
{
  AutState  autState;

};
struct TState_InspiratoryPauseDelay
{
  GuardState  guardState;
  TState_InspiratoryPauseDelayAut  ts_InspiratoryPauseDelayAut;

};
struct TState_TimeConstraints_o3
{
  Timer right_clock_RecruitmentManeuverOnDelay = current_time;
  Timer left_clock_InspiratoryPauseDelay = current_time;
  TState_InspiratoryPauseDelay  ts_InspiratoryPauseDelay;
  TState_RecruitmentManeuverOnDelay  ts_RecruitmentManeuverOnDelay;

};
struct TState_choice2RecruitmentManeuverTimeout_guard
{
  AutState  autState;

};
struct TState_End3
{
  AutState  autState;

};
struct TState_choice_1choiceRecruitmentManeuverTimeout_guard
{
  AutState  autState;
  TState_End3  ts_End3;

};
struct TState_choiceRecruitmentManeuverTimeout_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceRecruitmentManeuverTimeout_guard  ts_choice_1choiceRecruitmentManeuverTimeout_guard;
  TState_choice2RecruitmentManeuverTimeout_guard  ts_choice2RecruitmentManeuverTimeout_guard;

};
struct TState_guardRecruitmentManeuverTimeout
{
  GuardState  guardState;
  TState_choiceRecruitmentManeuverTimeout_guard  ts_choiceRecruitmentManeuverTimeout_guard;

};
struct TState_CheckRecruitment
{
  AutState  autState;

};
struct TState_guard1RecruitmentManeuverTimeout
{
  GuardState  guardState;
  TState_CheckRecruitment  ts_CheckRecruitment;

};
struct TState_RecruitmentManeuverTimeout
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1RecruitmentManeuverTimeout  ts_guard1RecruitmentManeuverTimeout;
  TState_guardRecruitmentManeuverTimeout  ts_guardRecruitmentManeuverTimeout;

};
struct TState_TimeConstraints_o2
{
  Timer left_clock_RecruitmentManeuverTimeout = current_time;
  Timer right_clock_TimeConstraints_o3 = current_time;
  TState_RecruitmentManeuverTimeout  ts_RecruitmentManeuverTimeout;
  TState_TimeConstraints_o3  ts_TimeConstraints_o3;

};
struct TState_choice2InspiratoryPauseTimeout_guard
{
  AutState  autState;

};
struct TState_End2
{
  AutState  autState;

};
struct TState_choice_1choiceInspiratoryPauseTimeout_guard
{
  AutState  autState;
  TState_End2  ts_End2;

};
struct TState_choiceInspiratoryPauseTimeout_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceInspiratoryPauseTimeout_guard  ts_choice_1choiceInspiratoryPauseTimeout_guard;
  TState_choice2InspiratoryPauseTimeout_guard  ts_choice2InspiratoryPauseTimeout_guard;

};
struct TState_guardInspiratoryPauseTimeout
{
  GuardState  guardState;
  TState_choiceInspiratoryPauseTimeout_guard  ts_choiceInspiratoryPauseTimeout_guard;

};
struct TState_CheckInspiratoryPause
{
  AutState  autState;

};
struct TState_guard1InspiratoryPauseTimeout
{
  GuardState  guardState;
  TState_CheckInspiratoryPause  ts_CheckInspiratoryPause;

};
struct TState_InspiratoryPauseTimeout
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1InspiratoryPauseTimeout  ts_guard1InspiratoryPauseTimeout;
  TState_guardInspiratoryPauseTimeout  ts_guardInspiratoryPauseTimeout;

};
struct TState_TimeConstraints_o1
{
  Timer right_clock_TimeConstraints_o2 = current_time;
  Timer left_clock_InspiratoryPauseTimeout = current_time;
  TState_InspiratoryPauseTimeout  ts_InspiratoryPauseTimeout;
  TState_TimeConstraints_o2  ts_TimeConstraints_o2;

};
struct TState_choice2Timeout1_guard
{
  AutState  autState;

};
struct TState_Final
{
  AutState  autState;

};
struct TState_choice_1choiceTimeout1_guard
{
  AutState  autState;
  TState_Final  ts_Final;

};
struct TState_choiceTimeout1_guard
{
  ChoiceState  choiceState;
  TState_choice_1choiceTimeout1_guard  ts_choice_1choiceTimeout1_guard;
  TState_choice2Timeout1_guard  ts_choice2Timeout1_guard;

};
struct TState_guardTimeout1
{
  GuardState  guardState;
  TState_choiceTimeout1_guard  ts_choiceTimeout1_guard;

};
struct TState_Wait
{
  AutState  autState;

};
struct TState_guard1Timeout1
{
  GuardState  guardState;
  TState_Wait  ts_Wait;

};
struct TState_Timeout1
{
  bool  startedState;
  InterruptState  interruptState;
  TState_guard1Timeout1  ts_guard1Timeout1;
  TState_guardTimeout1  ts_guardTimeout1;

};
struct TState_TimeConstraints
{
  Timer right_clock_TimeConstraints_o1 = current_time;
  Timer left_clock_Timeout1 = current_time;
  TState_Timeout1  ts_Timeout1;
  TState_TimeConstraints_o1  ts_TimeConstraints_o1;

};
struct TState_part1
{
  AutState  autState;

};
struct TState_Scheduling1
{
  AutState  autState;
  TState_part1  ts_part1;

};
struct TState_InspiratoryComponent
{
  float  t3;
  float  t2;
  float  t1;
  Timer right_clock_TimeConstraints = current_time;
  Timer left_clock_Scheduling1 = current_time;
  TState_Scheduling1  ts_Scheduling1;
  TState_TimeConstraints  ts_TimeConstraints;

};
struct TState_BreathCycleScheduler
{
  SequenceState  sequenceState;
  TState_InspiratoryComponent  ts_InspiratoryComponent;
  TState_ExpiratoryComponent  ts_ExpiratoryComponent;

};
struct TState_BreathCycle
{
  Timer left_clock_BreathCycleScheduler = current_time;
  Timer right_clock_BreathCycleConstraint = current_time;
  TState_BreathCycleScheduler  ts_BreathCycleScheduler;
  TState_BreathCycleConstraint  ts_BreathCycleConstraint;

};
struct TState_TestSynchronisation
{
  float  t0;
  KleeneState  kleeneState;
  TState_BreathCycle  ts_BreathCycle;

};
const std::vector<AutState>  shallow_final_Scheduling1 = {S1};
const std::vector<AutState>  deep_final_Scheduling1 = {part1};
const std::vector<AutState>  shallow_final_part1 = {S3};
const std::vector<AutState>  shallow_final_Wait = {S1};
const std::vector<AutState>  deep_final_choice_1choiceTimeout1_guard = {Final};
const std::vector<AutState>  shallow_final_Final = {S0};
const std::vector<AutState>  shallow_final_choice2Timeout1_guard = {S0};
const std::vector<AutState>  shallow_final_CheckInspiratoryPause = {S0, S1};
const std::vector<AutState>  deep_final_choice_1choiceInspiratoryPauseTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_End2 = {S0};
const std::vector<AutState>  shallow_final_choice2InspiratoryPauseTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_CheckRecruitment = {S0, S1};
const std::vector<AutState>  deep_final_choice_1choiceRecruitmentManeuverTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_End3 = {S0};
const std::vector<AutState>  shallow_final_choice2RecruitmentManeuverTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_InspiratoryPauseDelayAut = {S0, S1};
const std::vector<AutState>  shallow_final_RecruitmentManeuverOnAut = {S0, S1};
const std::vector<AutState>  shallow_final_Scheduling2 = {S2};
const std::vector<AutState>  shallow_final_CheckSpontaneousBreath = {S0, S1};
const std::vector<AutState>  deep_final_choice_1choiceCheckSpontaneousBreakTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_EndTimeout = {S0};
const std::vector<AutState>  shallow_final_choice2CheckSpontaneousBreakTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_LastActions = {S0, S1};
const std::vector<AutState>  deep_final_choice_1choiceBreathCycleTimeInterrupt_guard = {S0};
const std::vector<AutState>  shallow_final_TimeEnd = {S0};
const std::vector<AutState>  shallow_final_choice2BreathCycleTimeInterrupt_guard = {S0};
const std::vector<AutState>  shallow_final_ExpiratoryStart = {S1};
const std::vector<AutState>  deep_final_choice_1choiceNoExpiratoryPauseTimeout_guard = {ExpiratoryPauseTimeoutEnd};
const std::vector<AutState>  shallow_final_ExpiratoryPauseTimeoutEnd = {S0};
const std::vector<AutState>  shallow_final_choice2NoExpiratoryPauseTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_CheckExpiratoryPause = {S0, S1};
const std::vector<AutState>  deep_final_choice_1choiceExpiratoryPauseTimeout_guard = {S0};
const std::vector<AutState>  shallow_final_End5 = {S0};
const std::vector<AutState>  shallow_final_choice2ExpiratoryPauseTimeout_guard = {S0};
const std::vector<AutState>  deep_final_choice_1choiceBreathCycleConstraint_guard = {S0};
const std::vector<AutState>  shallow_final_Error = {S0};
const std::vector<AutState>  shallow_final_choice2BreathCycleConstraint_guard = {S0};
TState_TestSynchronisation  ts_TestSynchronisation;
std::time_t  step_time = 1.0E9;
Timer  last_event_time = 0;

int    Step()
{
	int  exec = 0;
	current_time = step_time+current_time;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && (((SEQ_FST == SEQ_FST && ((part1 == part1 && (S0 == S1 || S0 == S0 || S0 == S2)) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))))) || (SEQ_FST == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), part1) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), S0) !=shallow_final_part1.end()) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && ((S4 == S6 || S4 == S4 || S4 == S5) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))) || (SEQ_FST == SEQ_SND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && ((S4 == S6 || S4 == S4 || S4 == S5) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1)
						{
							std::cout<<"Step Inspiratory pause off scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))))
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_SECOND;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState = GUARD_NOTSTARTED;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = NONE;
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))))
							{
								std::cout<<"Inspiratory pause off Step timeout\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_SECOND;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = NONE;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))
								{
									std::cout<<"Recruitment off Step Timeout\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && ((S4 == S6 || S4 == S4 || S4 == S5) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5))
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath Step scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S5;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							std::cout<<"Detect Spontaneous breath Interrupt Step\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_SECOND;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = NONE;
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_SECOND;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_NOTSTARTED;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = NONE;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))))))
			{
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5))
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath Step scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S5;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							std::cout<<"Detect Spontaneous breath Interrupt Step\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_SECOND;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = NONE;
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_SECOND;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_NOTSTARTED;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = NONE;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_SECOND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = NONE;
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))
				{
					ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState = GUARD_STARTED;
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))))
			{
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))
				{
					ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState = GUARD_STARTED;
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(current_time);
			}
		
		}
	
	}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && ((S4 == S6 || S4 == S4 || S4 == S5) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && ((S4 == S6 || S4 == S4 || S4 == S5) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1)
						{
							std::cout<<"Step Inspiratory pause off scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))))
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_SECOND;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState = GUARD_NOTSTARTED;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = NONE;
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.autState = Final;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))))
							{
								std::cout<<"Inspiratory pause off Step timeout\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_SECOND;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = NONE;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.autState = End2;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))
								{
									std::cout<<"Recruitment off Step Timeout\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.autState = End3;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && ((S4 == S6 || S4 == S4 || S4 == S5) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) && false == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5))
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath Step scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S5;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							std::cout<<"Detect Spontaneous breath Interrupt Step\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_SECOND;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = NONE;
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_SECOND;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_NOTSTARTED;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = NONE;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))))))
			{
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5))
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath Step scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S5;
						exec = 1;
					
					}else if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							std::cout<<"Detect Spontaneous breath Interrupt Step\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_SECOND;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = NONE;
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && S0 == S0))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState = LEFT;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = S0;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.autState = EndTimeout;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState = S0;
										exec = 1;
									
									}
								
								}
							
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))) || (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_SECOND;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_NOTSTARTED;
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = NONE;
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time)  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState = GUARD_STARTED;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && S0 == S0))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState = LEFT;
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = S0;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.autState = TimeEnd;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState = S0;
											exec = 1;
										
										}
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.autState = ExpiratoryPauseTimeoutEnd;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_SECOND;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = NONE;
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)))))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))))
									{
										if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && S0 == S0))
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState = LEFT;
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = S0;
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0))
										{
											if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState == S0)
											{
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.autState = End5;
												ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState = S0;
												exec = 1;
											
											}
										
										}
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (GUARD_NOTSTARTED == GUARD_STARTED && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_SECOND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = NONE;
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))
				{
					ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState = GUARD_STARTED;
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))))
			{
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.expired(4.0E10, current_time) && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState == false  && ((NONE == NONE && S0 == S0) || (NONE == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)))))
				{
					ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState = GUARD_STARTED;
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && S0 == S0))
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState = LEFT;
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = S0;
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.autState = Error;
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState = S0;
							exec = 1;
						
						}
					
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    no_expiratory_pause_on()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && ((SEQ_FST == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), part1) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), S0) !=shallow_final_part1.end()) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))) || (SEQ_FST == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))
			{
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))
			{
				if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    detect_spontaneous_breath()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && ((SEQ_FST == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), part1) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), S0) !=shallow_final_part1.end()) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S4 || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))) || (SEQ_FST == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S4 || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S4 || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath scheduling\n";ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										std::cout<<"Detect spontaneous breath 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath scheduling\n";ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										std::cout<<"Detect spontaneous breath 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S4 || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S4 || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S4 || ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(current_time/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || (INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath scheduling\n";ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										std::cout<<"Detect spontaneous breath 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S4)
					{
						std::cout<<"Detect spontaneous breath scheduling\n";ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState == S0)
								{
									std::cout<<"Launch transition 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										std::cout<<"Detect spontaneous breath 3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    inspiratory_pause_on()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && (SEQ_FST == SEQ_FST && ((part1 == part1 && S0 == S0) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0)))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1=current_time;std::cout<<"Enter S3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S1;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
							{
								if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(current_time);
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(current_time);
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1=current_time;std::cout<<"Enter S3\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S1;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
							{
								if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.expired(1.0E10, current_time)  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(current_time);
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(current_time);
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    expiratory_pause_on()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && ((SEQ_FST == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), part1) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), S0) !=shallow_final_part1.end()) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S5 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (SEQ_FST == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S5 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S5 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S6;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S0;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S6;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S0;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S5 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S5 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S5 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S2)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S6;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S0;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S5)
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4=current_time;std::cout<<"Enter S6\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S6;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S2)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S0;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    expiratory_pause_off()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && ((SEQ_FST == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), part1) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), S0) !=shallow_final_part1.end()) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S6 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S0)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (SEQ_FST == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S6 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S0)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S6 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S0)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S6 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S0)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S6 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S0)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (S4 == S6 || ((INT_FIRST == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && S2 == S0)) || (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))))))))
			{
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_SND;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t5 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6 = current_time;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4 = std::numeric_limits<std::time_t>::max();
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S4;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.left_clock_CheckSpontaneousBreakTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.clock_timed_interrupt.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S2;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.left_clock_NoExpiratoryPauseTimeout.reset_clock(ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler);
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState = S0;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState = INT_FIRST;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = false;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
				ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S0;
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6 || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState == S6)
					{
						ts_TestSynchronisation.t0=current_time;std::cout<<"Enter S2\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t6=std::numeric_limits<std::time_t>::max();ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.left_clock_Scheduling2.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState = S2;
						exec = 1;
					
					}
				
				}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
				{
					if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.expired(((40+(ts_TestSynchronisation.t0/1.0E9)-(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.getTimeStamp()/1.0E9)))*1.0E9, current_time) == false  && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState = S1;
										exec = 1;
									
									}
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.left_clock_BreathCycleTimeInterrupt.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.t4/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.right_clock_ExpiratoryPauseTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.right_clock_TimeConstraints2_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.right_clock_TimeConstraints2_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.right_clock_TimeConstraints2.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    set_paw()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && (SEQ_FST == SEQ_FST && part1 == part1)))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1)
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = S1;
						exec = 1;
					
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1))
			{
				if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1)
				{
					if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1)
					{
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = S1;
						exec = 1;
					
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    recruitment_maneuver_on()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && (SEQ_FST == SEQ_FST && ((part1 == part1 && S0 == S0) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0))) || ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0)))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2=current_time;std::cout<<"Enter S1\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S2;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
							{
								if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(current_time);
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(current_time);
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))) || ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S0)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2=current_time;std::cout<<"Enter S1\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S2;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.expired(1.5E10, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState == false  && S0 == S0)))
							{
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_STARTED;
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0))
							{
								if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState == S0)
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S1;
									exec = 1;
								
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = true;
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}else if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
					{
						if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
						{
							if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
							{
								if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.expired(1.0E10, current_time)  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(current_time);
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(current_time);
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    recruitment_maneuver_off()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && (SEQ_FST == SEQ_FST && ((part1 == part1 && S0 == S2) && (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0)))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S2)
						{
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))))
								{
									if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState == false  && S0 == S0)))
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_STARTED;
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = true;
									}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0))
									{
										if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState == S0)
										{
											ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S1;
											exec = 1;
										
										}
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = true;
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}

int    inspiratory_pause_off()
{
	int  exec = 0;
	if((((((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && (((std::find(shallow_final_Scheduling1.begin(), shallow_final_Scheduling1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState) !=shallow_final_Scheduling1.end() || std::find(shallow_final_part1.begin(), shallow_final_part1.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState) !=shallow_final_part1.end()) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_NOTSTARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), S0) !=shallow_final_Wait.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState == GUARD_STARTED && std::find(shallow_final_Wait.begin(), shallow_final_Wait.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState) !=shallow_final_Wait.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (NONE == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (NONE == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == NONE && (std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end() || std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), S0) !=shallow_final_choice2Timeout1_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == LEFT && std::find(shallow_final_Final.begin(), shallow_final_Final.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice_1choiceTimeout1_guard.ts_Final.autState) !=shallow_final_Final.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.choiceState == RIGHT && std::find(shallow_final_choice2Timeout1_guard.begin(), shallow_final_choice2Timeout1_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guardTimeout1.ts_choiceTimeout1_guard.ts_choice2Timeout1_guard.autState) !=shallow_final_choice2Timeout1_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), S0) !=shallow_final_CheckInspiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckInspiratoryPause.begin(), shallow_final_CheckInspiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState) !=shallow_final_CheckInspiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (NONE == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end() || std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End2.begin(), shallow_final_End2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice_1choiceInspiratoryPauseTimeout_guard.ts_End2.autState) !=shallow_final_End2.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2InspiratoryPauseTimeout_guard.begin(), shallow_final_choice2InspiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guardInspiratoryPauseTimeout.ts_choiceInspiratoryPauseTimeout_guard.ts_choice2InspiratoryPauseTimeout_guard.autState) !=shallow_final_choice2InspiratoryPauseTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), S0) !=shallow_final_CheckRecruitment.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckRecruitment.begin(), shallow_final_CheckRecruitment.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState) !=shallow_final_CheckRecruitment.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (NONE == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == NONE && (std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end() || std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), S0) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == LEFT && std::find(shallow_final_End3.begin(), shallow_final_End3.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice_1choiceRecruitmentManeuverTimeout_guard.ts_End3.autState) !=shallow_final_End3.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2RecruitmentManeuverTimeout_guard.begin(), shallow_final_choice2RecruitmentManeuverTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guardRecruitmentManeuverTimeout.ts_choiceRecruitmentManeuverTimeout_guard.ts_choice2RecruitmentManeuverTimeout_guard.autState) !=shallow_final_choice2RecruitmentManeuverTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), S0) !=shallow_final_InspiratoryPauseDelayAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState == GUARD_STARTED && std::find(shallow_final_InspiratoryPauseDelayAut.begin(), shallow_final_InspiratoryPauseDelayAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState) !=shallow_final_InspiratoryPauseDelayAut.end())) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_NOTSTARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), S0) !=shallow_final_RecruitmentManeuverOnAut.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState == GUARD_STARTED && std::find(shallow_final_RecruitmentManeuverOnAut.begin(), shallow_final_RecruitmentManeuverOnAut.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState) !=shallow_final_RecruitmentManeuverOnAut.end()))))))) && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), S4) !=shallow_final_Scheduling2.end() && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((INT_FIRST == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), S2) !=shallow_final_LastActions.end()) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (GUARD_NOTSTARTED == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()))) || (INT_FIRST == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_SND && (std::find(shallow_final_Scheduling2.begin(), shallow_final_Scheduling2.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_Scheduling2.autState) !=shallow_final_Scheduling2.end() && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), S0) !=shallow_final_CheckSpontaneousBreath.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckSpontaneousBreath.begin(), shallow_final_CheckSpontaneousBreath.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guard1CheckSpontaneousBreakTimeout.ts_CheckSpontaneousBreath.autState) !=shallow_final_CheckSpontaneousBreath.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (NONE == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == NONE && (std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end() || std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), S0) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == LEFT && std::find(shallow_final_EndTimeout.begin(), shallow_final_EndTimeout.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice_1choiceCheckSpontaneousBreakTimeout_guard.ts_EndTimeout.autState) !=shallow_final_EndTimeout.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2CheckSpontaneousBreakTimeout_guard.begin(), shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_CheckSpontaneousBreakTimeout.ts_guardCheckSpontaneousBreakTimeout.ts_choiceCheckSpontaneousBreakTimeout_guard.ts_choice2CheckSpontaneousBreakTimeout_guard.autState) !=shallow_final_choice2CheckSpontaneousBreakTimeout_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_FIRST && std::find(shallow_final_LastActions.begin(), shallow_final_LastActions.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_pguardBreathCycleTimeInterrupt.ts_LastActions.autState) !=shallow_final_LastActions.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (NONE == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == NONE && (std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end() || std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), S0) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == LEFT && std::find(shallow_final_TimeEnd.begin(), shallow_final_TimeEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice_1choiceBreathCycleTimeInterrupt_guard.ts_TimeEnd.autState) !=shallow_final_TimeEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleTimeInterrupt_guard.begin(), shallow_final_choice2BreathCycleTimeInterrupt_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_BreathCycleTimeInterrupt.ts_guardBreathCycleTimeInterrupt.ts_choiceBreathCycleTimeInterrupt_guard.ts_choice2BreathCycleTimeInterrupt_guard.autState) !=shallow_final_choice2BreathCycleTimeInterrupt_guard.end())))))) && (((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), S0) !=shallow_final_ExpiratoryStart.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_ExpiratoryStart.begin(), shallow_final_ExpiratoryStart.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guard1NoExpiratoryPauseTimeout.ts_ExpiratoryStart.autState) !=shallow_final_ExpiratoryStart.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (NONE == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end() || std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_ExpiratoryPauseTimeoutEnd.begin(), shallow_final_ExpiratoryPauseTimeoutEnd.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice_1choiceNoExpiratoryPauseTimeout_guard.ts_ExpiratoryPauseTimeoutEnd.autState) !=shallow_final_ExpiratoryPauseTimeoutEnd.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2NoExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2NoExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_NoExpiratoryPauseTimeout.ts_guardNoExpiratoryPauseTimeout.ts_choiceNoExpiratoryPauseTimeout_guard.ts_choice2NoExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2NoExpiratoryPauseTimeout_guard.end())))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), S0) !=shallow_final_CheckExpiratoryPause.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.guardState == GUARD_STARTED && std::find(shallow_final_CheckExpiratoryPause.begin(), shallow_final_CheckExpiratoryPause.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guard1ExpiratoryPauseTimeout.ts_CheckExpiratoryPause.autState) !=shallow_final_CheckExpiratoryPause.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (NONE == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (NONE == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == NONE && (std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end() || std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), S0) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == LEFT && std::find(shallow_final_End5.begin(), shallow_final_End5.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice_1choiceExpiratoryPauseTimeout_guard.ts_End5.autState) !=shallow_final_End5.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.choiceState == RIGHT && std::find(shallow_final_choice2ExpiratoryPauseTimeout_guard.begin(), shallow_final_choice2ExpiratoryPauseTimeout_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_ExpiratoryComponent.ts_TimeConstraints2.ts_TimeConstraints2_o1.ts_TimeConstraints2_o2.ts_ExpiratoryPauseTimeout.ts_guardExpiratoryPauseTimeout.ts_choiceExpiratoryPauseTimeout_guard.ts_choice2ExpiratoryPauseTimeout_guard.autState) !=shallow_final_choice2ExpiratoryPauseTimeout_guard.end())))))))))))) && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_NOTSTARTED && 0) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState == GUARD_STARTED && 0))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState == INT_SECOND && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_NOTSTARTED && ((NONE == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (NONE == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (NONE == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.guardState == GUARD_STARTED && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == NONE && (std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end() || std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), S0) !=shallow_final_choice2BreathCycleConstraint_guard.end())) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == LEFT && std::find(shallow_final_Error.begin(), shallow_final_Error.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice_1choiceBreathCycleConstraint_guard.ts_Error.autState) !=shallow_final_Error.end()) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.choiceState == RIGHT && std::find(shallow_final_choice2BreathCycleConstraint_guard.begin(), shallow_final_choice2BreathCycleConstraint_guard.end(), ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guardBreathCycleConstraint.ts_choiceBreathCycleConstraint_guard.ts_choice2BreathCycleConstraint_guard.autState) !=shallow_final_choice2BreathCycleConstraint_guard.end()))))))) || KLEENE_NOTSTARTED == ts_TestSynchronisation.kleeneState) && (SEQ_FST == SEQ_FST && ((part1 == part1 && S0 == S1) && (INT_FIRST == INT_FIRST && ((GUARD_NOTSTARTED == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(std::numeric_limits<std::time_t>::max()/1.0E9)))*1.0E9, current_time) == false && false == false  && S0 == S0)) || (GUARD_NOTSTARTED == GUARD_STARTED && S0 == S0)))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(last_event_time);
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
		ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1)
						{
							std::cout<<"Inspiratory pause off scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_STARTED;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S1;
										exec = 1;
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = true;
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S1;
										exec = 1;
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = true;
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))))
	{
		ts_TestSynchronisation.kleeneState = KLEENE_STARTED;
		if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))))
		{
			if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState == SEQ_FST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))))
			{
				if(((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1) && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0)))))
				{
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState == part1 && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1))
					{
						if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState == S1)
						{
							std::cout<<"Inspiratory pause off scheduling\n";ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S3;
							exec = 1;
						
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
					}
					if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))
					{
						if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))
						{
							if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState == INT_FIRST && ((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)) || (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))))
							{
								if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_NOTSTARTED && (ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.expired(((5+(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1/1.0E9)))*1.0E9, current_time) == false && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState == false  && S0 == S0)))
								{
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_STARTED;
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S1;
										exec = 1;
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = true;
								}else if((ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState == GUARD_STARTED && ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0))
								{
									if(ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState == S0)
									{
										ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S1;
										exec = 1;
									
									}
									ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = true;
								}
								ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
							}
							ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
						}
						ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
					}
				
				}
				ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
			}
		
		}
	
	}
	if(exec == 1)
	{
		last_event_time.reset_clock(current_time);
	
	}
	return exec;

}
int main(int argc, char** argv)
{
	IO::configInputStream(argc, argv);
	ts_TestSynchronisation.kleeneState = KLEENE_NOTSTARTED;
	ts_TestSynchronisation.t0 = current_time;
	ts_TestSynchronisation.ts_BreathCycle.left_clock_BreathCycleScheduler.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.right_clock_BreathCycleConstraint.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.sequenceState = SEQ_FST;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t3 = std::numeric_limits<std::time_t>::max();
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t2 = std::numeric_limits<std::time_t>::max();
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.t1 = std::numeric_limits<std::time_t>::max();
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.right_clock_TimeConstraints.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.left_clock_Scheduling1.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.autState = part1;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_Scheduling1.ts_part1.autState = S0;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.right_clock_TimeConstraints_o1.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.left_clock_Timeout1.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.interruptState = INT_FIRST;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.startedState = false;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.guardState = GUARD_NOTSTARTED;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_Timeout1.ts_guard1Timeout1.ts_Wait.autState = S0;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.right_clock_TimeConstraints_o2.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.left_clock_InspiratoryPauseTimeout.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.interruptState = INT_FIRST;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.startedState = false;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.guardState = GUARD_NOTSTARTED;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_InspiratoryPauseTimeout.ts_guard1InspiratoryPauseTimeout.ts_CheckInspiratoryPause.autState = S0;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.left_clock_RecruitmentManeuverTimeout.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.right_clock_TimeConstraints_o3.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.interruptState = INT_FIRST;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.startedState = false;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.guardState = GUARD_NOTSTARTED;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_RecruitmentManeuverTimeout.ts_guard1RecruitmentManeuverTimeout.ts_CheckRecruitment.autState = S0;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.right_clock_RecruitmentManeuverOnDelay.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.left_clock_InspiratoryPauseDelay.reset_clock(current_time);
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.guardState = GUARD_NOTSTARTED;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_InspiratoryPauseDelay.ts_InspiratoryPauseDelayAut.autState = S0;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.guardState = GUARD_NOTSTARTED;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleScheduler.ts_InspiratoryComponent.ts_TimeConstraints.ts_TimeConstraints_o1.ts_TimeConstraints_o2.ts_TimeConstraints_o3.ts_RecruitmentManeuverOnDelay.ts_RecruitmentManeuverOnAut.autState = S0;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.interruptState = INT_FIRST;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.startedState = false;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.guardState = GUARD_NOTSTARTED;
	ts_TestSynchronisation.ts_BreathCycle.ts_BreathCycleConstraint.ts_guard1BreathCycleConstraint.ts_StartWait.autState = S0;
	while (1)
	{
		Event  _evt = IO::read_event(argc);
		if(_evt.label.empty())
		{
			break;
		
		}else if(_evt.label.compare("Step") == 0)
		{
			if(Step())
			{
				continue;
			}
		}else if(_evt.label.compare("no_expiratory_pause_on") == 0)
		{
			if(no_expiratory_pause_on())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("detect_spontaneous_breath") == 0)
		{
			if(detect_spontaneous_breath())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("inspiratory_pause_on") == 0)
		{
			if(inspiratory_pause_on())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("expiratory_pause_on") == 0)
		{
			if(expiratory_pause_on())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("expiratory_pause_off") == 0)
		{
			if(expiratory_pause_off())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("set_paw") == 0)
		{
			if(set_paw())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("recruitment_maneuver_on") == 0)
		{
			if(recruitment_maneuver_on())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("recruitment_maneuver_off") == 0)
		{
			if(recruitment_maneuver_off())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("inspiratory_pause_off") == 0)
		{
			if(inspiratory_pause_off())
			{
				continue;
			}else 
			{
				ERROR_2;
			
			}
		
		}else if(_evt.label.compare("advanceTo") == 0){
			if(Types::get_str(_evt.params[0]).find(":") != std::string::npos){
				long int numberOfSteps = advanceToV1(current_time, step_time, Types::get_str(_evt.params[0]));
				while (numberOfSteps > 0)
				{
					Step();
					numberOfSteps--;
				}
			}
			else{
				long int numberOfSteps = advanceToV2(current_time, step_time, Types::get_str(_evt.params[0]), (std::time_t) Types::get_double(_evt.params[1]));
				while (numberOfSteps > 0)
				{
					Step();
					numberOfSteps--;
				}
			}
		}else if(_evt.label.compare("advanceOf") == 0){
			if(Types::get_str(_evt.params[0]).find(":") != std::string::npos){
				long int numberOfSteps = advanceOfV1(step_time, Types::get_str(_evt.params[0]));
				while (numberOfSteps > 0)
				{
					Step();
					numberOfSteps--;
				}
			}
			else{
				long int numberOfSteps = advanceOfV2(step_time, Types::get_str(_evt.params[0]), (std::time_t) Types::get_double(_evt.params[1]));
				while (numberOfSteps > 0)
				{
					Step();
					numberOfSteps--;
				}
			}	
		}
		else 
		{
			ERROR_1;
		
		}
	
	}
	return 0;

}
