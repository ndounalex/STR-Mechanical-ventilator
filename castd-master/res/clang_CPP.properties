#headers
INCLUDE=#include <$>\n
INCLUDE2=#include "$"\n
DEFINE=#define $ %

#classes
CLASS=class\u0020
ENUM=enum\u0020
RECORD=struct\u0020
STRUCT_TEMPLATE=template<typename $> struct
STRUCT_TEMPLATE2=template<typename $, typename #> struct

#membership
MEMBER_ACCESS=$::#

#primitive types
INT_TYPE=int\u0020
INT_OBJECT_TYPE=
BOOLEAN_TYPE=int
DOUBLE_TYPE=double\u0020
DOUBLE_OBJECT_TYPE=
FLOAT_TYPE=float\u0020
FLOAT_OBJECT_TYPE=
CHAR_TYPE=char\u0020
CHAR_OBJECT_TYPE=
STRING_TYPE=std::string
CONST=const\u0020
AUTO_TYPE=auto\u0020
CHAR_PTR2=char**\u0020
CONST_CHAR_PTR2=const\u0020char*\u0020
VECTOR_TYPE=std::vector
SET_TYPE=std::set
MAP_TYPE=std::map
ENTRY_TYPE=std::pair
REGEX_TYPE=std::regex\u0020
MATCH_TYPE=std::smatch\u0020
UNKNOW_TYPE=T

# I/O
OUTPUT=std::cout
INPUT=std::cin
READ_LINE=getline($, #)
OUTPUT_PIPE=<<
INPUT_PIPE=>>

# conditions
EQUALS=\u0020==\u0020
NOT_EQUALS=\u0020!=\u0020
LESSER=\u0020<\u0020
LESSER_EQUALS=\u0020<=\u0020
GREATER=\u0020>\u0020
GREATER_EQUALS=\u0020>=\u0020
AND=\u0020&&\u0020
OR=\u0020||\u0020
NOT=!
IN=std::find($.begin(), $.end(), #) !=$.end()
NOTIN = std::find($.begin(), $.end(), #) == $.end()
IN_MAP=$.find(#) !=$.end()
NOT_IN_MAP=$.find(#) ==$.end()
COMPARE=$.compare(#)
EMPTY=$.empty()
TRUE=1
FALSE=0
CONTINUE=continue;

# statements
IF=if($)
ELSE=else\u0020
FOR=for($; #; %)
FOR2=for($ # : %)
WHILE=while ($)
ASSIGN=\u0020=\u0020
GOTO=goto $
GOTOFUNC = $:

# returns
RETURN_ANY=return $
EMPTY_RETURN=void\u0020
NIL=NULL

#calls , references
CONTAINER_TEMPLATE=<$>
ACCESS_ELEM_VECT=$.at(#)
ACCESS_ELEM_VECT2=$[#]
LAMBDA_CAPTURE=[$]
ARRAYS={$};\n
ADD_ELEM_VECT=$.push_back(#)
ADD_ELEM_MAP=$[#]=%
REGEX_MATCH=std::regex_match($, %, #)
STR_MATCH=$.str(#)
STR_INT=std::stoi($)
STR_DOUBLE=std::stod($)
STR_FLOAT=std::stof($)
STRINGIFY=stringify($)

#main signature
MAIN_FUNCTION=int main(int argc, char** argv)
EVENT=Event
CONFIG_INPUT_STREAM=IO::configInputStream(argc, argv)
READ_EVENT=IO::read_event(argc)
READ_EVENT_THREAD=IO::read_event(*argc)

#symboles
SHARED_PTR=&\u0020
PTR=*
POINT_TO=->
BRA_BEGIN=\n{\n
BRA_END=\n}
SEMI_COLON_SEP=;\n
COLON_SEP=:\u0020
COMMA_SEP=,\u0020
COMMA_NEWLINE=,\n
NEWLINE=\n
PAR_BEGIN=(
PAR_END=)
STRING_QUOTE="$"
INDENT=\u0020\u0020
SEP=\u0020\u0020

#thread signature
CONSUMER_FUNCTION=void* consumer_func(void* arg)
PRODUCER_EVENTS_FUNCTION=void* producers_event_func(void* arg)
PRODUCER_STEP_FUNCTION=void* producers_Step_func(void* arg)
THREAD_SLEEP=std::this_thread::sleep_for(std::chrono::nanoseconds(step_time/1000))
ARG_THREAD=(void*) &argc

#queue signature
QUEUE_TYPE=moodycamel::BlockingConcurrentQueue<Event>
WAIT_DEQ=queue.wait_dequeue
ENQUEUE=queue.enqueue

#time signature
TIME_TYPE=Timer
TIME_TYPE2=std::time_t
TIME_TYPE3=Timer $ = current_time
ASSIGN_TIME=std::chrono::duration_cast<std::chrono::nanoseconds>((std::chrono::system_clock::now().time_since_epoch())).count()
CLOCK_RESET=$.reset_clock()
CLOCK_RESET2=$.reset_clock(#)
CLOCK_RESET_SIM=$.reset_clock(current_time)
CLOCK_RESET_SIM2=$.reset_clock(#)
EXPIRED=#.expired($)
LOCK=$.lock()
UNLOCK=$.unlock()
MUTEX=std::mutex

